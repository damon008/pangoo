// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package analyse

import (
	"context"
	"fmt"
)

// include "base.thrift"
type AnalyseReq struct {
	ProjectId int16 `thrift:"projectId,1" json:"projectId" path:"projectId"`
}

func NewAnalyseReq() *AnalyseReq {
	return &AnalyseReq{}
}

func (p *AnalyseReq) GetProjectId() (v int16) {
	return p.ProjectId
}

func (p *AnalyseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyseReq(%+v)", *p)
}

type BaseResp struct {
	Code int8   `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
	Data string `thrift:"data,3" form:"data" json:"data" query:"data"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) GetCode() (v int8) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}

func (p *BaseResp) GetData() (v string) {
	return p.Data
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

type Ns struct {
	ID        int32  `thrift:"id,1" form:"id" json:"id" query:"id"`
	Name      string `thrift:"name,2" form:"name" json:"name" query:"name"`
	Path      string `thrift:"path,3" form:"path" json:"path" query:"path"`
	Kind      string `thrift:"kind,4" form:"kind" json:"kind" query:"kind"`
	FullPath  string `thrift:"full_path,5" form:"full_path" json:"full_path" query:"full_path"`
	ParentID  int32  `thrift:"parent_id,6" form:"parent_id" json:"parent_id" query:"parent_id"`
	AvatarURL string `thrift:"avatar_url,7" form:"avatar_url" json:"avatar_url" query:"avatar_url"`
	WebURL    string `thrift:"web_url,8" form:"web_url" json:"web_url" query:"web_url"`
}

func NewNs() *Ns {
	return &Ns{}
}

func (p *Ns) GetID() (v int32) {
	return p.ID
}

func (p *Ns) GetName() (v string) {
	return p.Name
}

func (p *Ns) GetPath() (v string) {
	return p.Path
}

func (p *Ns) GetKind() (v string) {
	return p.Kind
}

func (p *Ns) GetFullPath() (v string) {
	return p.FullPath
}

func (p *Ns) GetParentID() (v int32) {
	return p.ParentID
}

func (p *Ns) GetAvatarURL() (v string) {
	return p.AvatarURL
}

func (p *Ns) GetWebURL() (v string) {
	return p.WebURL
}

func (p *Ns) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ns(%+v)", *p)
}

// 建表关联
type ProjectInfo struct {
	ID         int64  `thrift:"id,1" form:"id" json:"id" query:"id"`
	// 业务线
	// required: true
	// example: paas、saas
	Department string `thrift:"department,2" form:"department" json:"department" query:"department"`
	// 产品
	// required: true
	// example: dmp2.0
	Product    string `thrift:"product,3" form:"product" json:"product" query:"product"`
	// 应用
	// example: quec-ota
	AppName    string `thrift:"appName,4" form:"appName" json:"appName" query:"appName"`
	// 应用对应的gitlab projectId
	// example: 1021
	AppId      int16  `thrift:"appId,5" form:"appId" json:"appId" query:"appId"`
	// 分支
	// example: 建立分支不建议中文
	Branch     string `thrift:"branch,6" form:"branch" json:"branch" query:"branch"`
	// 目标分支
	// example: master
	Ref        string `thrift:"ref,7" form:"ref" json:"ref" query:"ref"`
	// tag
	// example: 0.0.1
	Tag        string `thrift:"tag,8" form:"tag" json:"tag" query:"tag"`
	// 目标tag
	RefTag     string `thrift:"refTag,9" form:"refTag" json:"refTag" query:"refTag"`
}

func NewProjectInfo() *ProjectInfo {
	return &ProjectInfo{}
}

func (p *ProjectInfo) GetID() (v int64) {
	return p.ID
}

func (p *ProjectInfo) GetDepartment() (v string) {
	return p.Department
}

func (p *ProjectInfo) GetProduct() (v string) {
	return p.Product
}

func (p *ProjectInfo) GetAppName() (v string) {
	return p.AppName
}

func (p *ProjectInfo) GetAppId() (v int16) {
	return p.AppId
}

func (p *ProjectInfo) GetBranch() (v string) {
	return p.Branch
}

func (p *ProjectInfo) GetRef() (v string) {
	return p.Ref
}

func (p *ProjectInfo) GetTag() (v string) {
	return p.Tag
}

func (p *ProjectInfo) GetRefTag() (v string) {
	return p.RefTag
}

func (p *ProjectInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectInfo(%+v)", *p)
}

type Project struct {
	ID            int16  `thrift:"id,1" form:"id" json:"id" query:"id"`
	Description   string `thrift:"description,2" form:"description" json:"description" query:"description"`
	Name          string `thrift:"name,3" form:"name" json:"name" query:"name"`
	HTTPURLToRepo string `thrift:"http_url_to_repo,4" form:"http_url_to_repo" json:"http_url_to_repo" query:"http_url_to_repo"`
	SSHURLToRepo  string `thrift:"ssh_url_to_repo,5" form:"ssh_url_to_repo" json:"ssh_url_to_repo" query:"ssh_url_to_repo"`
	WebURL        string `thrift:"web_url,6" form:"web_url" json:"web_url" query:"web_url"`
}

func NewProject() *Project {
	return &Project{}
}

func (p *Project) GetID() (v int16) {
	return p.ID
}

func (p *Project) GetDescription() (v string) {
	return p.Description
}

func (p *Project) GetName() (v string) {
	return p.Name
}

func (p *Project) GetHTTPURLToRepo() (v string) {
	return p.HTTPURLToRepo
}

func (p *Project) GetSSHURLToRepo() (v string) {
	return p.SSHURLToRepo
}

func (p *Project) GetWebURL() (v string) {
	return p.WebURL
}

func (p *Project) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Project(%+v)", *p)
}

type Projects struct {
	ID                int16    `thrift:"id,1" form:"id" json:"id" query:"id"`
	Description       string   `thrift:"description,2" form:"description" json:"description" query:"description"`
	Name              string   `thrift:"name,3" form:"name" json:"name" query:"name"`
	NameWithNamespace string   `thrift:"name_with_namespace,4" form:"name_with_namespace" json:"name_with_namespace" query:"name_with_namespace"`
	Path              string   `thrift:"path,5" form:"path" json:"path" query:"path"`
	PathWithNamespace string   `thrift:"path_with_namespace,6" form:"path_with_namespace" json:"path_with_namespace" query:"path_with_namespace"`
	CreatedAt         string   `thrift:"created_at,7" form:"created_at" json:"created_at" query:"created_at"`
	DefaultBranch     string   `thrift:"default_branch,8" form:"default_branch" json:"default_branch" query:"default_branch"`
	TagList           []string `thrift:"tag_list,9" form:"tag_list" json:"tag_list" query:"tag_list"`
	Topics            []string `thrift:"topics,10" form:"topics" json:"topics" query:"topics"`
	SSHURLToRepo      string   `thrift:"ssh_url_to_repo,11" form:"ssh_url_to_repo" json:"ssh_url_to_repo" query:"ssh_url_to_repo"`
	HTTPURLToRepo     string   `thrift:"http_url_to_repo,12" form:"http_url_to_repo" json:"http_url_to_repo" query:"http_url_to_repo"`
	WebURL            string   `thrift:"web_url,13" form:"web_url" json:"web_url" query:"web_url"`
	AvatarURL         string   `thrift:"avatar_url,14" form:"avatar_url" json:"avatar_url" query:"avatar_url"`
	StarCount         int32    `thrift:"star_count,15" form:"star_count" json:"star_count" query:"star_count"`
	LastActivityAt    string   `thrift:"last_activity_at,16" form:"last_activity_at" json:"last_activity_at" query:"last_activity_at"`
	Ns                *Ns      `thrift:"ns,17" form:"ns" json:"ns" query:"ns"`
}

func NewProjects() *Projects {
	return &Projects{}
}

func (p *Projects) GetID() (v int16) {
	return p.ID
}

func (p *Projects) GetDescription() (v string) {
	return p.Description
}

func (p *Projects) GetName() (v string) {
	return p.Name
}

func (p *Projects) GetNameWithNamespace() (v string) {
	return p.NameWithNamespace
}

func (p *Projects) GetPath() (v string) {
	return p.Path
}

func (p *Projects) GetPathWithNamespace() (v string) {
	return p.PathWithNamespace
}

func (p *Projects) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Projects) GetDefaultBranch() (v string) {
	return p.DefaultBranch
}

func (p *Projects) GetTagList() (v []string) {
	return p.TagList
}

func (p *Projects) GetTopics() (v []string) {
	return p.Topics
}

func (p *Projects) GetSSHURLToRepo() (v string) {
	return p.SSHURLToRepo
}

func (p *Projects) GetHTTPURLToRepo() (v string) {
	return p.HTTPURLToRepo
}

func (p *Projects) GetWebURL() (v string) {
	return p.WebURL
}

func (p *Projects) GetAvatarURL() (v string) {
	return p.AvatarURL
}

func (p *Projects) GetStarCount() (v int32) {
	return p.StarCount
}

func (p *Projects) GetLastActivityAt() (v string) {
	return p.LastActivityAt
}

var Projects_Ns_DEFAULT *Ns

func (p *Projects) GetNs() (v *Ns) {
	if !p.IsSetNs() {
		return Projects_Ns_DEFAULT
	}
	return p.Ns
}

func (p *Projects) IsSetNs() bool {
	return p.Ns != nil
}

func (p *Projects) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Projects(%+v)", *p)
}

type AnalyseApi interface {
	CreateBranch(ctx context.Context, projectInfo *ProjectInfo) (r *BaseResp, err error)

	CreateTag(ctx context.Context, projectInfo *ProjectInfo) (r *BaseResp, err error)

	GetAll(ctx context.Context) (r *BaseResp, err error)

	CloneCode(ctx context.Context, gitUrls []string) (r *BaseResp, err error)
	//BaseResp GetProject(1: i16 projectId)(api.get="/api/v1/getProject/:projectId")
	CompareInfo(ctx context.Context, projectInfo *ProjectInfo) (r *BaseResp, err error)
}

// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package image

import (
	"context"
	"fmt"
)

//	struct ImageAgent {
//	   1: string docker
//	   2: string authStr
//	}
type AppInfo struct {
	App        string  `thrift:"app,1" form:"app" json:"app" query:"app"`
	Tag        string  `thrift:"tag,2" form:"tag" json:"tag" query:"tag"`
	GitUrl     *string `thrift:"gitUrl,3,optional" form:"gitUrl" json:"gitUrl,omitempty" query:"gitUrl"`
	DockerFile *string `thrift:"dockerFile,4,optional" form:"dockerFile" json:"dockerFile,omitempty" query:"dockerFile"`
	ConfPath   *string `thrift:"confPath,5,optional" form:"confPath" json:"confPath,omitempty" query:"confPath"`
	BaseRepo   *string `thrift:"baseRepo,6,optional" form:"baseRepo" json:"baseRepo,omitempty" query:"baseRepo"`
}

func NewAppInfo() *AppInfo {
	return &AppInfo{}
}

func (p *AppInfo) GetApp() (v string) {
	return p.App
}

func (p *AppInfo) GetTag() (v string) {
	return p.Tag
}

var AppInfo_GitUrl_DEFAULT string

func (p *AppInfo) GetGitUrl() (v string) {
	if !p.IsSetGitUrl() {
		return AppInfo_GitUrl_DEFAULT
	}
	return *p.GitUrl
}

var AppInfo_DockerFile_DEFAULT string

func (p *AppInfo) GetDockerFile() (v string) {
	if !p.IsSetDockerFile() {
		return AppInfo_DockerFile_DEFAULT
	}
	return *p.DockerFile
}

var AppInfo_ConfPath_DEFAULT string

func (p *AppInfo) GetConfPath() (v string) {
	if !p.IsSetConfPath() {
		return AppInfo_ConfPath_DEFAULT
	}
	return *p.ConfPath
}

var AppInfo_BaseRepo_DEFAULT string

func (p *AppInfo) GetBaseRepo() (v string) {
	if !p.IsSetBaseRepo() {
		return AppInfo_BaseRepo_DEFAULT
	}
	return *p.BaseRepo
}

func (p *AppInfo) IsSetGitUrl() bool {
	return p.GitUrl != nil
}

func (p *AppInfo) IsSetDockerFile() bool {
	return p.DockerFile != nil
}

func (p *AppInfo) IsSetConfPath() bool {
	return p.ConfPath != nil
}

func (p *AppInfo) IsSetBaseRepo() bool {
	return p.BaseRepo != nil
}

func (p *AppInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppInfo(%+v)", *p)
}

type ImageInfo struct {
	Apps []*AppInfo `thrift:"apps,1" form:"apps" json:"apps" query:"apps"`
}

func NewImageInfo() *ImageInfo {
	return &ImageInfo{}
}

func (p *ImageInfo) GetApps() (v []*AppInfo) {
	return p.Apps
}

func (p *ImageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageInfo(%+v)", *p)
}

type ImageCommitInfo struct {
	Repo           string `thrift:"repo,1" form:"repo" json:"repo" query:"repo"`
	CallBack       string `thrift:"callBack,2" form:"callBack" json:"callBack" query:"callBack"`
	SizeLimit      int8   `thrift:"sizeLimit,3" form:"sizeLimit" json:"sizeLimit" query:"sizeLimit"`
	LayerSizeLimit int8   `thrift:"layerSizeLimit,4" form:"layerSizeLimit" json:"layerSizeLimit" query:"layerSizeLimit"`
	LayerLimit     int8   `thrift:"layerLimit,5" form:"layerLimit" json:"layerLimit" query:"layerLimit"`
	ImageId        int32  `thrift:"imageId,6" form:"imageId" json:"imageId" query:"imageId"`
	PodName        string `thrift:"podName,7" form:"podName" json:"podName" query:"podName"`
}

func NewImageCommitInfo() *ImageCommitInfo {
	return &ImageCommitInfo{}
}

func (p *ImageCommitInfo) GetRepo() (v string) {
	return p.Repo
}

func (p *ImageCommitInfo) GetCallBack() (v string) {
	return p.CallBack
}

func (p *ImageCommitInfo) GetSizeLimit() (v int8) {
	return p.SizeLimit
}

func (p *ImageCommitInfo) GetLayerSizeLimit() (v int8) {
	return p.LayerSizeLimit
}

func (p *ImageCommitInfo) GetLayerLimit() (v int8) {
	return p.LayerLimit
}

func (p *ImageCommitInfo) GetImageId() (v int32) {
	return p.ImageId
}

func (p *ImageCommitInfo) GetPodName() (v string) {
	return p.PodName
}

func (p *ImageCommitInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageCommitInfo(%+v)", *p)
}

type BaseResp struct {
	Code int8   `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
	Data string `thrift:"data,3" form:"data" json:"data" query:"data"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) GetCode() (v int8) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}

func (p *BaseResp) GetData() (v string) {
	return p.Data
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

type ImageApi interface {
	ImageBuild(ctx context.Context, imageInfo *ImageInfo) (r *BaseResp, err error)

	ImagePush(ctx context.Context, repo string) (r *BaseResp, err error)

	ImagePull(ctx context.Context, repo string) (r *BaseResp, err error)

	GetImageInfo(ctx context.Context, repo string) (r *BaseResp, err error)
}

// Code generated by hertz generator.

package analyse

import (
	"context"
	"fmt"
	"github.com/bytedance/sonic"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"net/http"
	"os"
	service "pangoo/katalyst/biz/service/analyse"
	"pangoo/pkg/conf"
	"pangoo/pkg/response"

	"pangoo/pkg/util/singleton"
	"path"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"pangoo/katalyst/biz/model/analyse"
)

// CreateBranch 创建分支
// @Summary 创建分支
// @Description 测试
// @Tags gitlab操作
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Param projectInfo body analyse.ProjectInfo true "projectInfo，创建分支所需信息"
// @Success 200 {object} analyse.BaseResp
// @Router /api/v1/createBranch [post]
func CreateBranch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req analyse.ProjectInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err)
		return
	}
	data, err := service.CreateBranch(&req)
	c.JSON(consts.StatusOK, data)
}

// CreateTag 创建tag
// @Summary 创建tag
// @Tags gitlab操作
// @Description 测试
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Param projectInfo body analyse.ProjectInfo true "projectInfo，tag所需信息"
// @Success 200 {object} analyse.BaseResp
// @Router /api/v1/createTag [post]
func CreateTag(ctx context.Context, c *app.RequestContext) {
	var err error
	var req analyse.ProjectInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err)
		return
	}
	data, _ := service.CreateTag(&req)
	c.JSON(consts.StatusOK, data)
}

// CompareInfo 代码对比
// @Summary 代码对比
// @Description 测试
// @Tags gitlab操作
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Param appName query string true "appName"
// @Param product query string true "product，应用app对应的product如：dmp2"
// @Param from query string true "from，比较对象"
// @Param to query string true "to，被比较对象，如：master 分支或其它tag"
// @Success 200 {object} analyse.BaseResp
// @Router /api/v1/compareInfo [post]
//curl -X POST 'http://10.66.38.142:20000/api/v1/compareInfo?appName=quec-ota&product=dmp2&from=2.32.2-050601&to=master'
func CompareInfo(ctx context.Context, c *app.RequestContext) {
	// @Param from path string true "branchName，分支"
	//c.Param()
	var err error
	appName := c.Query("appName")
	product := c.Query("product")
	from := c.Query("from")
	to := c.Query("to")
	err = c.BindAndValidate(&appName)
	err = c.BindAndValidate(&product)
	err = c.BindAndValidate(&from)
	err = c.BindAndValidate(&to)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err)
		return
	}
	data, _ := service.CompareInfo(appName, product, from, to)
	c.JSON(consts.StatusOK, data)
}

// GetAll 获取所有分支情况
// @Summary 获取所有分支情况
// @Description 测试
// @Tags gitlab操作
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Success 200 {object} analyse.BaseResp
// @Router /api/v1/getProjects [get]
func GetAll(ctx context.Context, c *app.RequestContext) {
	//var err error
	resp := new(response.BaseResp)
	var dd []*analyse.Projects
	var ms []*string
	var i = 1
	for i < 20 {
		uri := fmt.Sprintf("%s/projects?private_token=%s&per_page=100&page=%d", conf.EnvConfig.Config.GitConfig.ProjectUrl, conf.EnvConfig.Config.GitConfig.Token, i)
		//hlog.Info(uri)
		res, err := singleton.HttpDo(uri, "GET")
		if err == nil {
			if ee := sonic.Unmarshal(res.Body(), &dd); ee != nil {
				hlog.Error(ee)
				c.JSON(consts.StatusInternalServerError, resp)
				return
			}
			/*ss, er := sonic.Marshal(dd)
			if er != nil {
				hlog.Error(er)
			}
			hlog.Info(string(ss))*/
			for _, p := range dd {
				url := fmt.Sprintf("%s/projects/%d/repository/branches?private_token=%s", conf.EnvConfig.Config.GitConfig.ProjectUrl, p.ID, conf.EnvConfig.Config.GitConfig.Token)
				re, er := singleton.HttpDo(url, "GET")
				if er != nil {
					hlog.Error(er)
				}
				if re.StatusCode() == http.StatusOK {
					if string(re.Body()) == "[]" {
						ss := fmt.Sprintf("projectId: %d, projectName: %s, data: %s", p.ID, p.Name, string(re.Body()))
						resp.Msg = "分支不存在，数据丢失，projectName: " + p.Name
						ms = append(ms, &ss)
						hlog.Error("丢失数据：", resp)
					}
				}
				if re.StatusCode() == http.StatusInternalServerError {
					ss := fmt.Sprintf("projectId: %v, projectName: %v, data: %v", p.ID, p.Name, string(re.Body()))
					//msg := "分支不存在，数据丢失，projectName: " + p.Name
					ms = append(ms, &ss)
				}
			}
			//hlog.Info("prod count: ", len(dd))
		} else {
			hlog.Error("项目分页：", i, " err: ", err)
		}
		i++
	}
	go writeToFile(ms)
	c.JSON(consts.StatusOK, ms)
}

func writeToFile(ms []*string) {
	if err := os.MkdirAll("/opt/bz/", 0o777); err != nil {
		hlog.Error(err.Error())
	}
	logFileName := time.Now().Format("2006-01-02150405") + ".json"
	fileName := path.Join("/opt/bz/", logFileName)
	if _, err := os.Stat(fileName); err != nil {
		if _, err := os.Create(fileName); err != nil {
			hlog.Error(err.Error())
		}
	}
	dd, _ := sonic.Marshal(ms)
	if err := os.WriteFile(fileName, dd, 0o777); err != nil {
		hlog.Error("write json to file failed")
	}
}

// GetProject 获取单个项目
// @Summary 获取单个项目
// @Tags gitlab操作
// @Description 测试单个项目
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Success 200 {object} analyse.BaseResp
// @Param projectId path string true "projectId"
// @Param projectName query string true "projectName"
// @Router /api/v1/getProject/{projectId} [get]
func GetProject(ctx context.Context, c *app.RequestContext) {
	var err error
	projectId := c.Param("projectId")
	projectName := c.Query("projectName")

	err = c.BindAndValidate(&projectId)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(response.BaseResp)
	url := fmt.Sprintf("%s/projects/%s/repository/branches?private_token=%s", conf.EnvConfig.Config.GitConfig.ProjectUrl, projectId, conf.EnvConfig.Config.GitConfig.Token)
	res, err := singleton.HttpDo(url, "GET")
	if res.StatusCode() == http.StatusOK {
		if string(res.Body()) == "[]" {
			resp.Msg = "分支不存在，数据丢失，projectId: " + projectId + "，projectName: " + projectName
			c.JSON(consts.StatusOK, resp)
			return
		}
		resp.Msg = "success"
		resp.Data = ""
		c.JSON(consts.StatusOK, resp)
	}
}

// MergeReq
// @Summary 分支合并请求
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Tags gitlab操作
// @Param projectName path string true "项目名"
// @Param branchName path string true "源分支"
// @Param targetBranch path string true "目标分支"
// @Success 200 {object} analyse.BaseResp
// @router /api/v1/mergeReq/{projectName}/{branchName}/{targetBranch} [POST]
func MergeReq(ctx context.Context, c *app.RequestContext) {
	var err error
	projectName := c.Param("projectName")
	branchName := c.Param("branchName")
	targetBranch := c.Param("targetBranch")

	err = c.BindAndValidate(&projectName)
	err = c.BindAndValidate(&branchName)
	err = c.BindAndValidate(&targetBranch)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err)
		return
	}
	c.JSON(consts.StatusOK, nil)
	/*if err != nil {
		c.JSON(consts.StatusOK, data)
		return
	}
	c.JSON(consts.StatusOK, data)*/
}

// CloneCode .
// @Summary 拉取项目代码
// @Tags gitlab操作
// @Accept application/json
// @Produce application/json
// @Security TokenAuth
// @Param gitUrls body []string true "项目地址信息"
// @Success 200 {object} analyse.BaseResp
// @router /api/v1/cloneCode [POST]
func CloneCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req []string
	err = c.BindAndValidate(&req)
	hlog.Info(req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	service.CloneCode(req)
	resp := new(analyse.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// Code generated by hertz generator.

package image

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"pangoo/katalyst/biz/model/image"
	image_service "pangoo/katalyst/biz/service/image"
)

// ImageBuild .
// @Summary 构建镜像
// @Accept application/json
// @Tags images
// @Author Damon.Wang
// @Produce application/json
// @Content application/json
// @Param imageInfo body image.ImageInfo true "imageInfo，构建镜像所需信息"
// @Success 200 {object} image.BaseResp
// @Failure 400 {object} image.BaseResp
// @Failure 403 {object} image.BaseResp
// @Failure 500 {object} image.BaseResp
// @router /api/v1/imageBuild [POST]
func ImageBuild(ctx context.Context, c *app.RequestContext) {
	var err error
	var req image.ImageInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	hlog.Info(req.Apps[0].App)
	hlog.Info(*req.Apps[0].DockerFile)

	resp := new(image.BaseResp)
	hlog.Info("APP info: ", *req.Apps[0].DockerFile, ", tag: ", *req.Apps[0].BaseRepo + req.Apps[0].App +":"+ req.Apps[0].Tag)
	image_service.NewImageServe().ImageBuild(ctx, req)

	c.JSON(consts.StatusOK, resp)
}

// ImagePush .
// @Tags images
// @router /api/v1/imagePush [POST]
func ImagePush(ctx context.Context, c *app.RequestContext) {
	var err error
	var req string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(image.BaseResp)
	//image_service.NewImageServe().ImagePush()

	c.JSON(consts.StatusOK, resp)
}

// ImagePull .
// @Tags images
// @router /api/v1/imagePull [GET]
func ImagePull(ctx context.Context, c *app.RequestContext) {
	var err error
	var req string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(image.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// GetImageInfo .
// @router /api/v1/getImageInfo [GET]
// @Tags images
func GetImageInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(image.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

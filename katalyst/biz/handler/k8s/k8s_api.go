// Code generated by hertz generator.

package k8s

import (
	"context"
	k8s "pangoo/katalyst/biz/model/k8s"
	"pangoo/katalyst/biz/service/deployment"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetDeploymentList .
// @Tags k8s操作
// @Param  namespace path  string true "命名空间"
// @router /api/v1/getDeploymentList/{namespace} [GET]
func GetDeploymentList(ctx context.Context, c *app.RequestContext) {
	var err error
	namespace := c.Param("namespace")
	err = c.BindAndValidate(&namespace)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(k8s.BaseResp)

	list := deployment.NewTaskService().GetDeploymentList(namespace)

	c.JSON(consts.StatusOK, list)
}

// GetDeploymentByName .
// @Tags k8s操作
// @router /api/v1/getDeployment/:namespace/:name [GET]
func GetDeploymentByName(ctx context.Context, c *app.RequestContext) {
	var err error
	namespace := c.Param("namespace")
	name := c.Param("name")
	err = c.BindAndValidate(&namespace)
	err = c.BindAndValidate(&name)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	obj, err := deployment.NewTaskService().GetDeployment(namespace, name)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, obj.Status)
}

// CreateDeployment .
// @Summary 创建应用
// @Accept application/json
// @Tags k8s操作
// @Author Damon.Wang
// @Produce application/json
// @Content application/json
// @Param deployReq body k8s.DeployReq true "deployReq，部署所需的信息"
// @Success 200 {object} k8s.BaseResp
// @Failure 400 {object} k8s.BaseResp
// @Failure 403 {object} k8s.BaseResp
// @Failure 500 {object} k8s.BaseResp
// @router /api/v1/createDeployment/:namespace [POST]
func CreateDeployment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req k8s.DeployReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(k8s.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDeployment .
// @Summary 更新应用
// @Accept application/json
// @Tags k8s操作
// @Author Damon.Wang
// @Produce application/json
// @Content application/json
// @Param deployReq body k8s.DeployReq true "deployReq，部署所需的信息"
// @Success 200 {object} k8s.BaseResp
// @Failure 400 {object} k8s.BaseResp
// @Failure 403 {object} k8s.BaseResp
// @Failure 500 {object} k8s.BaseResp
// @router /api/v1/updateDeployment [PUT]
func UpdateDeployment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req k8s.DeployReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(k8s.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// DeletePod .
// @Summary 重启应用pod
// @Accept application/json
// @Tags k8s操作
// @Author Damon.Wang
// @Produce application/json
// @Content application/json
// @Param deployReq body k8s.DeployReq true "deployReq，部署所需的信息"
// @Success 200 {object} k8s.BaseResp
// @Failure 400 {object} k8s.BaseResp
// @Failure 403 {object} k8s.BaseResp
// @Failure 500 {object} k8s.BaseResp
// @router /api/v1/deletePod [DELETE]
func DeletePod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req k8s.DeployReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(k8s.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// RollBack .
// @Summary 回滚应用pod到上一版本
// @Accept application/json
// @Tags k8s操作
// @Author Damon.Wang
// @Produce application/json
// @Content application/json
// @Param deployReq body k8s.DeployReq true "deployReq，部署所需的信息"
// @Success 200 {object} k8s.BaseResp
// @Failure 400 {object} k8s.BaseResp
// @Failure 403 {object} k8s.BaseResp
// @Failure 500 {object} k8s.BaseResp
// @router /api/v1/rollBack [PUT]
func RollBack(ctx context.Context, c *app.RequestContext) {
	var err error
	var req k8s.DeployReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(k8s.BaseResp)

	c.JSON(consts.StatusOK, resp)
}
